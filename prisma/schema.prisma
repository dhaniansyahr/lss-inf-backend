// This is your Prisma schema file,

// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Enums
enum TYPE_MATKUL {
  WAJIB
  PILIHAN
}

enum ASISTEN_LAB_STATUS {
  DITOLAK
  PENDING
  DISETUJUI
}

enum NILAI_MATAKULIAH {
  A
  AB
  B
  BC
  C
  D
  E
}

enum BIDANG_MINAT {
  RPL
  DATA_MINING
  JARINGAN
  GIS
  UMUM
}

enum SEMESTER {
  GANJIL
  GENAP
}

enum HARI {
  SENIN
  SELASA
  RABU
  KAMIS
  JUMAT
  SABTU
}

// Core User Management
model User {
  id          String   @id
  fullName    String
  email       String   @unique
  password    String
  userLevelId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userLevel UserLevels @relation(fields: [userLevelId], references: [id])
}

model UserLevels {
  id        String   @id
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
  acl       Acl[]
  dosen     Dosen[]
  mahasiswa Mahasiswa[]
}

// ACL System
model Features {
  id        String   @id
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  actions Actions[]
  acl     Acl[]
}

model Actions {
  id        String   @id
  name      String
  featureId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feature Features @relation(fields: [featureId], references: [id])

  @@unique([featureId, name])
}

model Acl {
  id          String   @id
  featureId   String
  actionId    String
  userLevelId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  feature   Features   @relation(fields: [featureId], references: [id])
  userLevel UserLevels @relation(fields: [userLevelId], references: [id])

  @@unique([featureId, actionId, userLevelId])
}

// Academic Entities
model Matakuliah {
  id          String       @id
  nama        String
  kode        String       @unique
  type        TYPE_MATKUL
  sks         Int
  bidangMinat BIDANG_MINAT
  isTeori     Boolean      @default(false)
  semester    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  dosenPengampu         DosenPengampuMK[]
  jadwal                Jadwal[]
  pendaftaranAsistenLab PendaftaranAsistenLab[]
}

model Dosen {
  id          String       @id
  nama        String
  email       String       @unique
  password    String
  nip         String       @unique
  bidangMinat BIDANG_MINAT
  userLevelId String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  userLevel     UserLevels        @relation(fields: [userLevelId], references: [id])
  dosenPengampu DosenPengampuMK[]
  jadwalDosen   JadwalDosen[] // Junction table
  absensi       Absensi[]
}

model Mahasiswa {
  id          String   @id
  nama        String
  npm         String   @unique
  semester    Int
  password    String
  tahunMasuk  Int
  isActive    Boolean
  userLevelId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userLevel             UserLevels              @relation(fields: [userLevelId], references: [id])
  jadwalMahasiswa       JadwalMahasiswa[] // Junction table
  absensi               Absensi[]
  pendaftaranAsistenLab PendaftaranAsistenLab[]
  asistenLab            AsistenLab[]
}

// Junction Tables for Many-to-Many relationships
model DosenPengampuMK {
  id           String   @id
  dosenId      String
  matakuliahId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  dosen      Dosen      @relation(fields: [dosenId], references: [id])
  matakuliah Matakuliah @relation(fields: [matakuliahId], references: [id])

  @@unique([dosenId, matakuliahId])
}

model JadwalDosen {
  id       String @id
  jadwalId String
  dosenId  String

  jadwal Jadwal @relation(fields: [jadwalId], references: [id])
  dosen  Dosen  @relation(fields: [dosenId], references: [id])

  @@unique([jadwalId, dosenId])
}

model JadwalMahasiswa {
  id          String @id
  jadwalId    String
  mahasiswaId String

  jadwal    Jadwal    @relation(fields: [jadwalId], references: [id])
  mahasiswa Mahasiswa @relation(fields: [mahasiswaId], references: [id])

  @@unique([jadwalId, mahasiswaId])
}

model JadwalAsistenLab {
  id           String @id
  jadwalId     String
  asistenLabId String

  jadwal     Jadwal     @relation(fields: [jadwalId], references: [id])
  asistenLab AsistenLab @relation(fields: [asistenLabId], references: [id])

  @@unique([jadwalId, asistenLabId])
}

// Scheduling
model Jadwal {
  id           String    @id
  hari         HARI
  shiftId      String
  ruanganId    String
  semester     SEMESTER
  tahun        String
  isOverride   Boolean   @default(false)
  kelas        String?
  matakuliahId String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  shift      Shift               @relation(fields: [shiftId], references: [id])
  ruangan    RuanganLaboratorium @relation(fields: [ruanganId], references: [id])
  matakuliah Matakuliah          @relation(fields: [matakuliahId], references: [id])

  jadwalDosen           JadwalDosen[]
  jadwalAsistenLab      JadwalAsistenLab[]
  jadwalMahasiswa       JadwalMahasiswa[]
  meetings              Meeting[]
  pendaftaranAsistenLab PendaftaranAsistenLab[]
  overrideData          OverrideJadwal[]
}

model AsistenLab {
  id          String    @id
  mahasiswaId String
  semester    Int
  tahun       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  mahasiswa        Mahasiswa          @relation(fields: [mahasiswaId], references: [id])
  jadwalAsistenLab JadwalAsistenLab[]
}

model PendaftaranAsistenLab {
  id             String             @id
  mahasiswaId    String
  jadwalId       String
  nilaiTeori     NILAI_MATAKULIAH
  nilaiPraktikum NILAI_MATAKULIAH
  nilaiAkhir     NILAI_MATAKULIAH
  status         ASISTEN_LAB_STATUS @default(PENDING)
  keterangan     String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  mahasiswa  Mahasiswa  @relation(fields: [mahasiswaId], references: [id])
  jadwal     Jadwal     @relation(fields: [jadwalId], references: [id])
  matakuliah Matakuliah @relation(fields: [matakuliahId], references: [id])

  // Derived from jadwal, but kept for query performance
  matakuliahId String

  @@unique([mahasiswaId, jadwalId])
}

model OverrideJadwal {
  id        String   @id
  jadwalId  String
  message   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jadwal Jadwal @relation(fields: [jadwalId], references: [id])
}

model Meeting {
  id        String   @id
  jadwalId  String
  tanggal   String
  pertemuan Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jadwal  Jadwal    @relation(fields: [jadwalId], references: [id])
  absensi Absensi[]
}

// Laboratory Management
model RuanganLaboratorium {
  id          String    @id
  nama        String
  lokasi      String
  kepalaLabId String?
  kapasitas   Int       @default(25)
  isLab       Boolean   @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  kepalaLab        KepalaLab?         @relation(fields: [kepalaLabId], references: [id])
  historyKepalaLab HistoryKepalaLab[]
  jadwal           Jadwal[]
}

// Separated KepalaLab entity
model KepalaLab {
  id        String   @id
  nama      String
  nip       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ruanganLaboratorium RuanganLaboratorium[]
  historyKepalaLab    HistoryKepalaLab[]
}

model HistoryKepalaLab {
  id           String    @id
  kepalaLabId  String
  ruanganLabId String
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  kepalaLab  KepalaLab           @relation(fields: [kepalaLabId], references: [id])
  ruanganLab RuanganLaboratorium @relation(fields: [ruanganLabId], references: [id])
}

model Holidays {
  id          String   @id
  name        String // Holiday name
  date        DateTime // Changed from separate day/month/year to DateTime
  isRecurring Boolean  @default(false) // For yearly recurring holidays
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Absensi {
  id          String    @id
  mahasiswaId String?
  meetingId   String?
  dosenId     String?
  isPresent   Boolean   @default(false)
  keterangan  String?
  waktuAbsen  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  mahasiswa Mahasiswa? @relation(fields: [mahasiswaId], references: [id])
  meeting   Meeting?   @relation(fields: [meetingId], references: [id])
  dosen     Dosen?     @relation(fields: [dosenId], references: [id])

  @@unique([mahasiswaId, meetingId])
}

model Shift {
  id        String   @id
  startTime String
  endTime   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jadwal Jadwal[]
}
