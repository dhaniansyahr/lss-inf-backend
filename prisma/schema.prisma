// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum TYPE_MATKUL {
  TEORI
  PRAKTIKUM
}

enum ASISTEN_LAB_STATUS {
  DITOLAK
  PENDING
  DISETUJUI
}

model Matakuliah {
  id              String            @id
  nama            String
  kode            String            @unique
  type            TYPE_MATKUL
  sks             Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  dosenPengampuMK DosenPengampuMK[]
  jadwal          Jadwal[]
}

model User {
  id          String     @id
  fullName    String
  email       String     @unique
  password    String
  userLevelId String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userLevel   UserLevels @relation(fields: [userLevelId], references: [id])
  dosen       Dosen?
  mahasiswa   Mahasiswa?
  absensi     Absensi[]
}

model Dosen {
  id              String            @id
  nama            String
  email           String
  nip             String
  userId          String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])
  dosenPengampuMK DosenPengampuMK[]
  jadwalDosen     Jadwal[]

  asistenLabId String?
  AsistenLab   AsistenLab? @relation(fields: [asistenLabId], references: [id])
}

model UserLevels {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  acl       Acl[]
}

model Features {
  id        String   @id
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  actions Actions[]
  acl     Acl[]
}

model Actions {
  id          String   @id
  name        String
  namaFeature String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  feature Features @relation(fields: [namaFeature], references: [name])

  @@unique([namaFeature, name])
}

model Acl {
  id          String   @id
  namaFeature String
  namaAction  String
  userLevelId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  feature   Features   @relation(fields: [namaFeature], references: [name])
  userLevel UserLevels @relation(fields: [userLevelId], references: [id])

  @@unique([namaFeature, namaAction, userLevelId])
}

model DosenPengampuMK {
  id           String     @id
  dosenId      String
  matakuliahId String
  dosen        Dosen      @relation(fields: [dosenId], references: [id])
  matakuliah   Matakuliah @relation(fields: [matakuliahId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model AsistenLab {
  id          String             @id
  mahasiswaId String
  jadwalId    String
  status      ASISTEN_LAB_STATUS
  semester    Int
  tahun       String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?

  Dosen     Dosen[]
  Mahasiswa Mahasiswa[]
  Jadwal    Jadwal[]
}

model Mahasiswa {
  id        String   @id
  nama      String
  npm       String
  semester  Int
  isActive  Boolean
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User        @relation(fields: [userId], references: [id])
  asistenLab   AsistenLab? @relation(fields: [asistenLabId], references: [id])
  asistenLabId String?

  jadwal Jadwal[]
}

model Jadwal {
  id           String    @id
  date         String
  shiftId      String
  ruanganId    String
  dosenId      String
  asistenLabId String
  mahasiswaId  String
  matakuliahId String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  shift      Shift               @relation(fields: [shiftId], references: [id])
  ruangan    RuanganLaboratorium @relation(fields: [ruanganId], references: [id])
  dosen      Dosen               @relation(fields: [dosenId], references: [id])
  asisten    AsistenLab          @relation(fields: [asistenLabId], references: [id])
  mahasiswa  Mahasiswa           @relation(fields: [mahasiswaId], references: [id])
  matakuliah Matakuliah          @relation(fields: [matakuliahId], references: [id])

  Absensi Absensi?
}

model RuanganLaboratorium {
  id                 String    @id
  nama               String
  lokasi             String
  namaKepalaLab      String
  nipKepalaLab       String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  histroyKepalaLabId String

  historyKepalaLab HistoryKepalaLab   @relation("currentLab", fields: [histroyKepalaLabId], references: [id])
  historyLabs      HistoryKepalaLab[] @relation("historyLabs")

  jadwal Jadwal[]
}

model HistoryKepalaLab {
  id           String   @id
  nama         String
  nip          String
  ruanganLabId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  currentLab RuanganLaboratorium[] @relation("currentLab")
  ruanganLab RuanganLaboratorium   @relation("historyLabs", fields: [ruanganLabId], references: [id])
}

model Holidays {
  id        String   @id
  day       String
  month     String
  year      String
  date      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Absensi {
  id        String    @id
  userId    String
  jadwalId  String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  jadwal Jadwal @relation(fields: [jadwalId], references: [id])
}

model Shift {
  id        String   @id
  startTime String
  endTime   String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jadwal Jadwal[]
}
